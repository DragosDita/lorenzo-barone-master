# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/configuration-reference/#executor-job
#     # docker:
#     #   - image: cimg/base:stable
# # Test Docker
#     docker:
#       - image: cimg/node:lts
#         auth:
#           username: dragosdita
#           password: Draghetto1234@  # context / project UI env-var reference

# # Test Docker ^^^^^


#     # Add steps to the job
#     # See: https://circleci.com/docs/configuration-reference/#steps
#     steps:
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World!"

# # Orchestrate jobs using workflows
# # See: https://circleci.com/docs/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello
version: 2.1
workflows:
  commit-test-build-deploy:
    jobs:
      - commit
      - tests:
          requires:
            - commit
      - build:
          requires:
            - tests
      - deploy:
          requires:
            - build

jobs:
  commit:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout

      # Add your commit steps here
      - run:
          name: Commit changes
          command: |
            echo "Committing changes..."
            # Insert your commit commands here

  tests:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout

      # Add your test steps here
      - run:
          name: Run tests
          command: |
            echo "Running tests..."
            test_output=$(python manage.py test lorenzo_barone 2>&1)
            test_result=$?
            
            # Count the number of tests
            test_count=$(echo "$test_output" | grep -oP "(?<=Ran )\d+")
            
            # Check if any tests failed
            if [[ $test_result != 0 ]]; then
              echo "Tests failed!"
            else
              echo "Tests passed!"
            fi
            
            # Display the test results
            echo "$test_output"
            
            # Output the number of tests
            echo "Total tests: $test_count"
      

      # Add your build steps here
      - run:
          name: Build and test
          command: |
            echo "Building and testing..."
            # Insert your build and test commands here

  deploy:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout

      # Add your deployment steps here
      - run:
          name: Deploy to production
          command: |
            echo "Deploying to production..."
            # Insert your deployment commands here
