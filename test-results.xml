<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="6" failures="0" skipped="0" tests="6" time="1.230" timestamp="2023-05-17T09:54:34.133657" hostname="Dragos"><testcase classname="lorenzo_barone.tests_test.lorenzo_baroneTestCase" name="test_addition_with_zero" time="0.001"><error message="failed on setup with &quot;django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.&quot;">cls = &lt;class 'lorenzo_barone.tests_test.lorenzo_baroneTestCase'&gt;

    @classmethod
    def setUpClass(cls):
&gt;       super().setUpClass()

venv\lib\site-packages\django\test\testcases.py:1392:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\django\test\testcases.py:205: in setUpClass
    cls._add_databases_failures()
venv\lib\site-packages\django\test\testcases.py:231: in _add_databases_failures
    cls.databases = cls._validate_databases()
venv\lib\site-packages\django\test\testcases.py:213: in _validate_databases
    if alias not in connections:
venv\lib\site-packages\django\utils\connection.py:73: in __iter__
    return iter(self.settings)
venv\lib\site-packages\django\utils\functional.py:49: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\django\utils\connection.py:45: in settings
    self._settings = self.configure_settings(self._settings)
venv\lib\site-packages\django\db\utils.py:148: in configure_settings
    databases = super().configure_settings(databases)
venv\lib\site-packages\django\utils\connection.py:50: in configure_settings
    settings = getattr(django_settings, self.settings_name)
venv\lib\site-packages\django\conf\__init__.py:87: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = 'DATABASES'

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
&gt;           raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )
E           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

venv\lib\site-packages\django\conf\__init__.py:67: ImproperlyConfigured</error></testcase><testcase classname="lorenzo_barone.tests_test.lorenzo_baroneTestCase" name="test_basic_addition" time="0.000"><error message="failed on setup with &quot;django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.&quot;">cls = &lt;class 'lorenzo_barone.tests_test.lorenzo_baroneTestCase'&gt;

    @classmethod
    def setUpClass(cls):
&gt;       super().setUpClass()

venv\lib\site-packages\django\test\testcases.py:1392:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\django\test\testcases.py:205: in setUpClass
    cls._add_databases_failures()
venv\lib\site-packages\django\test\testcases.py:231: in _add_databases_failures
    cls.databases = cls._validate_databases()
venv\lib\site-packages\django\test\testcases.py:213: in _validate_databases
    if alias not in connections:
venv\lib\site-packages\django\utils\connection.py:73: in __iter__
    return iter(self.settings)
venv\lib\site-packages\django\utils\functional.py:49: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\django\utils\connection.py:45: in settings
    self._settings = self.configure_settings(self._settings)
venv\lib\site-packages\django\db\utils.py:148: in configure_settings
    databases = super().configure_settings(databases)
venv\lib\site-packages\django\utils\connection.py:50: in configure_settings
    settings = getattr(django_settings, self.settings_name)
venv\lib\site-packages\django\conf\__init__.py:87: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = 'DATABASES'

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
&gt;           raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )
E           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

venv\lib\site-packages\django\conf\__init__.py:67: ImproperlyConfigured</error></testcase><testcase classname="lorenzo_barone.tests_test.lorenzo_baroneTestCase" name="test_floating_point_addition" time="0.000"><error message="failed on setup with &quot;django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.&quot;">cls = &lt;class 'lorenzo_barone.tests_test.lorenzo_baroneTestCase'&gt;

    @classmethod
    def setUpClass(cls):
&gt;       super().setUpClass()

venv\lib\site-packages\django\test\testcases.py:1392:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\django\test\testcases.py:205: in setUpClass
    cls._add_databases_failures()
venv\lib\site-packages\django\test\testcases.py:231: in _add_databases_failures
    cls.databases = cls._validate_databases()
venv\lib\site-packages\django\test\testcases.py:213: in _validate_databases
    if alias not in connections:
venv\lib\site-packages\django\utils\connection.py:73: in __iter__
    return iter(self.settings)
venv\lib\site-packages\django\utils\functional.py:49: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\django\utils\connection.py:45: in settings
    self._settings = self.configure_settings(self._settings)
venv\lib\site-packages\django\db\utils.py:148: in configure_settings
    databases = super().configure_settings(databases)
venv\lib\site-packages\django\utils\connection.py:50: in configure_settings
    settings = getattr(django_settings, self.settings_name)
venv\lib\site-packages\django\conf\__init__.py:87: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = 'DATABASES'

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
&gt;           raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )
E           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

venv\lib\site-packages\django\conf\__init__.py:67: ImproperlyConfigured</error></testcase><testcase classname="lorenzo_barone.tests_test.lorenzo_baroneTestCase" name="test_large_numbers" time="0.000"><error message="failed on setup with &quot;django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.&quot;">cls = &lt;class 'lorenzo_barone.tests_test.lorenzo_baroneTestCase'&gt;

    @classmethod
    def setUpClass(cls):
&gt;       super().setUpClass()

venv\lib\site-packages\django\test\testcases.py:1392:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\django\test\testcases.py:205: in setUpClass
    cls._add_databases_failures()
venv\lib\site-packages\django\test\testcases.py:231: in _add_databases_failures
    cls.databases = cls._validate_databases()
venv\lib\site-packages\django\test\testcases.py:213: in _validate_databases
    if alias not in connections:
venv\lib\site-packages\django\utils\connection.py:73: in __iter__
    return iter(self.settings)
venv\lib\site-packages\django\utils\functional.py:49: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\django\utils\connection.py:45: in settings
    self._settings = self.configure_settings(self._settings)
venv\lib\site-packages\django\db\utils.py:148: in configure_settings
    databases = super().configure_settings(databases)
venv\lib\site-packages\django\utils\connection.py:50: in configure_settings
    settings = getattr(django_settings, self.settings_name)
venv\lib\site-packages\django\conf\__init__.py:87: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = 'DATABASES'

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
&gt;           raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )
E           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

venv\lib\site-packages\django\conf\__init__.py:67: ImproperlyConfigured</error></testcase><testcase classname="lorenzo_barone.tests_test.lorenzo_baroneTestCase" name="test_negative_numbers" time="0.000"><error message="failed on setup with &quot;django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.&quot;">cls = &lt;class 'lorenzo_barone.tests_test.lorenzo_baroneTestCase'&gt;

    @classmethod
    def setUpClass(cls):
&gt;       super().setUpClass()

venv\lib\site-packages\django\test\testcases.py:1392:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\django\test\testcases.py:205: in setUpClass
    cls._add_databases_failures()
venv\lib\site-packages\django\test\testcases.py:231: in _add_databases_failures
    cls.databases = cls._validate_databases()
venv\lib\site-packages\django\test\testcases.py:213: in _validate_databases
    if alias not in connections:
venv\lib\site-packages\django\utils\connection.py:73: in __iter__
    return iter(self.settings)
venv\lib\site-packages\django\utils\functional.py:49: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\django\utils\connection.py:45: in settings
    self._settings = self.configure_settings(self._settings)
venv\lib\site-packages\django\db\utils.py:148: in configure_settings
    databases = super().configure_settings(databases)
venv\lib\site-packages\django\utils\connection.py:50: in configure_settings
    settings = getattr(django_settings, self.settings_name)
venv\lib\site-packages\django\conf\__init__.py:87: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = 'DATABASES'

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
&gt;           raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )
E           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

venv\lib\site-packages\django\conf\__init__.py:67: ImproperlyConfigured</error></testcase><testcase classname="lorenzo_barone.tests_test.lorenzo_baroneTestCase" name="test_string_concatenation" time="0.001"><error message="failed on setup with &quot;django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.&quot;">cls = &lt;class 'lorenzo_barone.tests_test.lorenzo_baroneTestCase'&gt;

    @classmethod
    def setUpClass(cls):
&gt;       super().setUpClass()

venv\lib\site-packages\django\test\testcases.py:1392:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\django\test\testcases.py:205: in setUpClass
    cls._add_databases_failures()
venv\lib\site-packages\django\test\testcases.py:231: in _add_databases_failures
    cls.databases = cls._validate_databases()
venv\lib\site-packages\django\test\testcases.py:213: in _validate_databases
    if alias not in connections:
venv\lib\site-packages\django\utils\connection.py:73: in __iter__
    return iter(self.settings)
venv\lib\site-packages\django\utils\functional.py:49: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\django\utils\connection.py:45: in settings
    self._settings = self.configure_settings(self._settings)
venv\lib\site-packages\django\db\utils.py:148: in configure_settings
    databases = super().configure_settings(databases)
venv\lib\site-packages\django\utils\connection.py:50: in configure_settings
    settings = getattr(django_settings, self.settings_name)
venv\lib\site-packages\django\conf\__init__.py:87: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = 'DATABASES'

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
&gt;           raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )
E           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

venv\lib\site-packages\django\conf\__init__.py:67: ImproperlyConfigured</error></testcase></testsuite></testsuites>